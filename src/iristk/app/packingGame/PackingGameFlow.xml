<?xml version="1.0" encoding="utf-8"?>
<flow name="PackingGameFlow" package="iristk.app.packingGame" 
	initial="Greeting" xmlns:this="iristk.app.packingGame.PackingGameFlow" xmlns="iristk.flow" 
	xmlns:p="iristk.flow.param" xmlns:agent="iristk.situated.SystemAgentFlow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="iristk.flow flow.xsd iristk.situated.SystemAgentFlow SystemAgentFlow.xsd">
	
 	<import class="java.util.List"/> 
	<import class="java.util.LinkedList"/>
	<import class="javafx.util.Pair"/>
	<import class="java.util.Iterator"/>
	
 	<param name="agent" type="iristk.situated.SystemAgentFlow"/>
	<param name="packables" type="PackablesMap"/>
	
	<var name="system" type="iristk.situated.SystemAgent" value="agent.getSystemAgent()"/> 

	<var name="packingList" type="LinkedList&lt;String&gt;" value = "new java.util.LinkedList&lt;String&gt;()"/>
	
	<state id="Idle" extends="Dialog">
		<onentry>
			<if cond="system.hasUsers()">
				<agent:attendRandom/>
				<goto state="Greeting"/>
			<else/>
				<agent:attendNobody/>
			</if>
		</onentry>
		<onevent name="sense.user.enter">
			<agent:attend target="event:user"/>
			<goto state="Greeting"/>
		</onevent>
	</state>
	
	<state id="Greeting" extends="Dialog">
		<onentry>
			<random>
				<agent:say gesture="'smile'">Greetings! Do you want to play with me?</agent:say>
				<agent:say gesture="'smile'">Hi. I am Furhat! Let's play a game.</agent:say>
				<agent:say gesture="'smile'">Hey there! Let's play a game.</agent:say>
			</random>
			<goto state="ExplainGame"/>
		</onentry>
	</state>
	

		<state id="ExplainGame" extends="Dialog">
		<onentry>
			<agent:say>I am going on holidays. I need to pack some stuff. Do you want to help?</agent:say>
			<agent:say>I will start by saying I pack my bag and I take with me <expr>packables.getRandom()</expr>
			. You then have to repeat the exact same sentence. At the end, you add another item to the
			packing list and it is my turn again. We continue this until one of us either fails to recall the exact
			sequence of the items or all items have been packed. Do you understand the rules?</agent:say>
			<agent:listen/>
			<!-- <goto state="PackIntro"/> -->
		</onentry>
 		<onevent name="sense.user.speak" cond="event?:sem:yes">
			<agent:say>Okay, let's play</agent:say>
			<goto state="PackIntro"/>
		</onevent> 
		<onevent name="sense.user.speak" cond="event?:sem:no">
			<agent:say>Okay, let Cynthia explain it again.</agent:say>
			<goto state="Idle"/>
		</onevent>	 
	</state>
	
	<state id="PackIntro" extends="Dialog">
		
		<onentry>
			<agent:say>I pack my bag and I take with me:</agent:say>
			<call state="PackRandomItem"/>
			<random>
				<agent:say>Your turn</agent:say>
				<agent:say>Now you</agent:say>
				<agent:say>It's your turn</agent:say>
			</random>
 			<goto state="PlayerPacks" />
		</onentry>
	</state>
	
	<state id="UserAddsItem" extends="Dialog">
		<param name="newItem" type="String"/>
 		<onentry>
			<if cond="!packingList.contains(newItem)">
				<exec>packingList.add(newItem)</exec>
				<exec>System.out.println(packingList)</exec>
				<elseif cond="packingList.contains(newItem)"/>
					<agent:say><expr>newItem</expr>is already in the packing list</agent:say>
					<goto state="CheckAgain"/>
			</if>
		<return/>
		</onentry>
	</state>
	
	<state id="PlayerPacks" extends="Dialog">
		<var name="packingListIterator" type="Iterator" value="packingList.iterator()" />
		
		<onentry> 
			<agent:listen/>
		</onentry>
		
		<onevent name="sense.user.speak" cond="event?:sem:packables">
			<var name="response" type="String" value="asString(event:sem:packables ).toLowerCase()"/>
			<var name="firstInList" type="String" value="packingListIterator.next()" />
		
			<exec>System.out.println("response"+response);System.out.println("firstInList: "+firstInList)</exec>
			<!-- check to see if the items the player mentions are already in the list -->
			<if cond="!(firstInList.equals(response)) &amp;&amp; packingListIterator.hasNext()">
				<exec>System.out.println(response+" is not in the packing list")</exec>
				<agent:say><expr>response</expr>is not in the packing list</agent:say>				
				<goto state="CheckAgain"/>
			
				<elseif cond="(firstInList.equals(response)) &amp;&amp; packingListIterator.hasNext()"/>
					<reentry/>
				<!-- <elseif cond="!packingListIterator.hasNext()"/> -->
				<else/>
					<call state="UserAddsItem" p:newItem="response"/>
					
			
			</if>
			<goto state="FurhatPacks"/>
		</onevent>
	</state>
	
	<state id="FurhatPacks" extends="Dialog">
		<var name="packingListIterator" type="Iterator" value="packingList.iterator()" />
		<var name="count" type="int" value="0"/>
		<onentry>
			<random>
				<agent:say>OK it's my turn now</agent:say>
				<agent:say>Alright then. My turn</agent:say>
				<agent:say>Good job. Now me</agent:say>
			</random>
			<agent:say>I pack my bag and I take with me
			
			<repeat while="packingListIterator.hasNext()">
				<expr>packables.get(packingListIterator.next())</expr>	
			</repeat>			
			
			and</agent:say>
			
			<call state="PackRandomItem"/>
			<goto state="PlayerPacks"/>
		</onentry>
		
	</state>
	
	
	<state id="PackRandomItem">
		<var name="randomPackable" type="Pair&lt;String,String&gt;" value="packables.getRandom()"></var>
		<onentry>
			<repeat while="packingList.contains(randomPackable.getValue())">
				<exec>randomPackable = packables.getRandom()</exec>
			</repeat>
			<exec>packingList.add(randomPackable.getKey())</exec>
			<agent:say>
				<expr>randomPackable.getValue()</expr>
			</agent:say>
			<exec>System.out.println("Packing list contains: " + packingList)</exec>
			<return/>
		</onentry>
	</state>
	
	<state id="ClearPackingList">
		<onentry>
			<exec>packingList.clear()</exec>
			<return/>
		</onentry>
	</state>

	
	<state id="CheckAgain" extends="Dialog">
		<onentry>
			<agent:say>Do you want to play again?</agent:say>
			<agent:listen/>
		</onentry>
		<onevent name="sense.user.speak" cond="event?:sem:yes">
			<agent:say>Okay, let's play again.</agent:say>
			<call state="ClearPackingList"/>
			<goto state="PackIntro"/>
		</onevent>
		<onevent name="sense.user.speak" cond="event?:sem:no">
			<agent:say>Okay, goodbye</agent:say>
			<call state="ClearPackingList"/>
			<goto state="Idle"/>
		</onevent>		
	</state>
	
	<state id="Dialog">
		<onevent name="sense.user.speech.start" cond="system.isAttending(event) and eq(event:speakers, 1)">
			<agent:gesture name="'smile'"/>
		</onevent>
		<onevent name="sense.user.speak" cond="event?:sem:stop">
			<agent:say>
				Goodbye
			</agent:say>
			<call state="ClearPackingList"/>
			<goto state="Idle"/>
		</onevent>
		<onevent name="sense.user.speak">
			<agent:say>Sorry, I didn't get that.</agent:say>
			<reentry/>
		</onevent>
		<onevent name="sense.user.speak.side">
			<agent:attendOther mode="'eyes'" />
			<agent:say>I didn't ask you.</agent:say>
			<agent:attendOther mode="'eyes'" />
			<reentry/>
		</onevent>
		<onevent name="sense.user.speak.multi">
			<agent:say>Don't speak at the same time.</agent:say>
			<reentry/>
		</onevent>
		<onevent name="sense.user.silence">
			<agent:say>Sorry, I didn't hear anything.</agent:say>
			<reentry/>
		</onevent>
		<onevent name="sense.user.leave" cond="system.isAttending(event)">
			<if cond="system.hasUsers()">
				<agent:attendRandom/>
			<else />
				<goto state="Idle"/>
			</if>
		</onevent>
		<onevent name="repeat">
			<reentry/>
		</onevent>
	</state>
	
</flow>