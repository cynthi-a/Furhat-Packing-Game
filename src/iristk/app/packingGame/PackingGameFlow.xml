<?xml version="1.0" encoding="utf-8"?>
<flow name="PackingGameFlow" package="iristk.app.packingGame" 
	initial="Idle" xmlns:this="iristk.app.packingGame.PackingGameFlow" xmlns="iristk.flow" 
	xmlns:p="iristk.flow.param" xmlns:agent="iristk.situated.SystemAgentFlow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="iristk.flow flow.xsd iristk.situated.SystemAgentFlow SystemAgentFlow.xsd">
	
 	<import class="java.util.List"/> 
	<import class="java.util.LinkedList"/>
	<import class="javafx.util.Pair"/>
	<import class="java.util.Iterator"/>
	<import class="java.util.Scanner"/>
	<import class="java.util.Random"/>
	
 	<param name="agent" type="iristk.situated.SystemAgentFlow"/>
	<param name="packables" type="PackablesMap"/>
	
	<var name="system" type="iristk.situated.SystemAgent" value="agent.getSystemAgent()"/> 
	<var name="packingList" type="LinkedList&lt;String&gt;" value = "new java.util.LinkedList&lt;String&gt;()"/>
	<var name="random" type="Random" value="new Random()"/>
	
	<state id="Idle" extends="Dialog">
		<onentry>
			<if cond="system.hasUsers()">
				<agent:attendRandom/>
				<goto state="Greeting"/>
			<else/>
				<agent:attendNobody/>
			</if>
		</onentry>
		<onevent name="sense.user.enter">
			<agent:attend target="event:user"/>
			<goto state="Greeting"/>
		</onevent>
	</state>
	
	<state id="WaitToContinue">
		<onentry>
			<agent:listen/>
			<reentry/>
		</onentry>
		<onevent name="sense.user.speak" cond="event?:sem:continue">
			<goto state="FurhatPacks"/>
		</onevent>
	</state>
	
	<state id="Greeting" extends="Dialog">
		<onentry>
			<random>
				<agent:say gesture="'smile'">Greetings! Do you want to play with me?</agent:say>
				<agent:say gesture="'smile'">Hi. I am Furhat! Let's play a game.</agent:say>
				<agent:say gesture="'smile'">Hey there! Let's play a game.</agent:say>
			</random>
			<agent:say>Would you like me to explain the rules?</agent:say>
			<agent:listen/>
		</onentry>
		<onevent name="sense.user.speak" cond="event?:sem:yes">
			<goto state="ExplainGame"/>
		</onevent>
		<onevent name="sense.user.speak" cond="event?:sem:no">
			<agent:say>Okay, let's play. Are you ready? Here goes</agent:say>
			<goto state="FurhatPacks"/>
		</onevent>
	</state>
	
	<state id="ExplainGame" extends="Dialog">
		<onentry>
			<agent:say>The game goes like this: </agent:say>
			<agent:say>I will start by saying I pack my bag and I take with me for example<expr>packables.getRandom().getValue()</expr>.
			You then have to repeat the exact same sentence. At the end, you add another item to the packing list and it is my turn again.
			We continue this until one of us either fails to recall the exact sequence of the items or all items have been packed.
			Do you understand the rules?</agent:say>
			<agent:listen/>
		</onentry>
 		<onevent name="sense.user.speak" cond="event?:sem:yes">
			<agent:say>Okay, let's play</agent:say>
			<goto state="FurhatPacks"/>
			
		</onevent> 
		<onevent name="sense.user.speak" cond="event?:sem:no">
			<agent:say>Okay, let Cynthia explain it again.</agent:say>
			<goto state="WaitToContinue"/>
		</onevent>
	</state>

	<state id="UserAddsItem" extends="Dialog">
		<param name="newItem" type="String"/>
 		<onentry>
			<if cond="!packingList.contains(newItem)">
				<exec>packingList.add(newItem)</exec>
				<exec>System.out.println(packingList)</exec>
				<elseif cond="packingList.contains(newItem)"/>
					<agent:say><expr>newItem</expr>is already in the packing list</agent:say>
					<goto state="CheckAgain" p:gameIsWon="false"/>
			</if>
		<return/>
		</onentry>
	</state>

	<state id="PlayerPacks" extends="Dialog">
		<var name="packingListIterator" type="Iterator" value="packingList.iterator()" />
		<var name="responseList" type="List" value="new LinkedList&lt;String&gt;()"/>
		<onentry> 
			<agent:listen timeout="10000" endSil="2000"/>
		</onentry>
		
		<onevent name="sense.user.speak" cond="event?:sem:packables">
			<var name="response" type="String" value="asString(event:text).toLowerCase()"/>

			<exec>
				Scanner sc = new Scanner(response);
				while(sc.hasNext()) {
					String nextWord = sc.next();
					if (packables.containsKey(nextWord)) {
						responseList.add(nextWord);
					}
				}
			</exec>
			
			<var name="responseIterator" type="Iterator" value="responseList.iterator()"/>

 			<repeat while="packingListIterator.hasNext()">
 				<var name="nextResponse" value="responseIterator.next()"/>
 				<if cond="!packingListIterator.next().equals(nextResponse) &amp;&amp; packingListIterator.hasNext()">
 					
 					<if cond="packingList.contains(nextResponse)">
 						<agent:say><expr>nextResponse</expr>is in the packing list but at a different position</agent:say>
 					<elseif cond="!packingList.contains(nextResponse)"/>
 						<agent:say><expr>nextResponse</expr>is not in the packing list</agent:say>
 					</if>
					<goto state="CheckAgain" p:gameIsWon="false"/>
				</if>
 			</repeat>
			
			<if cond="responseIterator.hasNext()">
				<call state="UserAddsItem" p:newItem="responseIterator.next()"/>
 				<elseif cond="!responseIterator.hasNext()"/>
					<agent:say>Seems like you forgot to add a new item to the list or the item you added is not a packable item</agent:say>
				<goto state="CheckAgain" p:gameIsWon="false"/>
			</if> 
			
			<!-- NEW -->
			<call state="PraisePlayer"/>
			<goto state="FurhatPacks"/>
		</onevent>
	</state>
	
	
	<state id="FurhatPacks" extends="Dialog">
		<var name="packingListIterator" type="Iterator" value="packingList.iterator()" />
		<var name="randomFloat" type="float" value="random.nextFloat()"/>
		
		<onentry>
			<agent:say>I pack my bag and I take with me
				<repeat while="packingListIterator.hasNext()">
					<expr>packables.get(packingListIterator.next())</expr>	
				</repeat>	
				<if cond="packingList.size() &gt; 1">
					and
				</if>
			</agent:say>
			
			<if cond="packingList.size() == packables.size()">
				<goto state="CheckAgain" p:gameIsWon="true"/>
				
				<elseif cond="packingList.size() &gt;= 10"/>
					<if cond="randomFloat &lt;= 0.7">
						<goto state="FailRound"/>
						<else/>
							<call state="PackRandomItem"/>
					</if>
				<elseif cond="packingList.size() &gt;= 6"/>
					<if cond="randomFloat &lt;= 0.5">
						<goto state="FailRound"/>
						<else/>
						<call state="PackRandomItem"/>
					</if>
				<elseif cond="packingList.size() &gt;= 4"/>
					<if cond="randomFloat &lt;= 0.3">
						<goto state="FailRound"/>
						<else/>
						<call state="PackRandomItem"/>
					</if>
				<elseif cond="packingList.size() &gt;= 2"/>
					<if cond="randomFloat &lt;= 0.2">
						<goto state="FailRound"/>
						<else/>
							<call state="PackRandomItem"/>
				 	</if>
				<else/>
					<call state="PackRandomItem"/>
			</if> 
	
			
			<random>
				<agent:say>Now you</agent:say>
				<agent:say>Your turn</agent:say>
			</random>
			<goto state="PlayerPacks"/>
		</onentry>

	</state>
	
	<state id="PraisePlayer">
		<onentry>
			<random>
				<agent:say gesture="'nod'">OK it's my turn now</agent:say>
				<agent:say>Alright then. My turn</agent:say>
				<agent:say gesture="'nod'">Good job. Now me</agent:say>
				<agent:say>Well done. I will go on</agent:say>
			</random>
			<return/>
		</onentry>
	</state>
	
	<state id="FailRound">
		<onentry>
			<random>
				<agent:say gesture="'express_sad'">I forgot which item comes next. You win.</agent:say>
			</random>
			<goto state="CheckAgain" p:gameIsWon="false"/>
		</onentry>
	</state>
	
	<state id="PackRandomItem">
		<var name="randomPackable" type="Pair&lt;String,String&gt;" value="packables.getRandom()"></var>
		<onentry>
		
			<repeat while="packingList.contains(randomPackable.getKey())">
				<exec>randomPackable = packables.getRandom()</exec>
			</repeat> 

			<exec>packingList.add(randomPackable.getKey())</exec>
			<agent:say>
				<expr>randomPackable.getValue()</expr>
			</agent:say>
			<exec>System.out.println("Packing list: " + packingList)</exec>
			<return/>
		</onentry>
	</state>
	
	<state id="ClearPackingList">
		<onentry>
			<exec>packingList.clear()</exec>
			<return/>
		</onentry>
	</state>

	
	<state id="CheckAgain" extends="Dialog">
		<param name="gameIsWon" type="boolean" default="false"/>
		<onentry>
			<if cond="gameIsWon">
				<agent:say>Congratulations! You remembered all<expr>packables.size()</expr>items in the game! Well done</agent:say>
			
				<else/>
				<random>
					<agent:say gesture="'brow_raise'">This round, we managed to remember<expr>packingList.size()</expr><if cond="packingList.size()==1">item only<else/>items</if></agent:say>
					<agent:say gesture="'brow_raise'">We remembered<expr>packingList.size()</expr><if cond="packingList.size()==1">item<else/>items</if>in this round</agent:say>
					<agent:say gesture="'brow_raise'">Let's see if we can beat<expr>packingList.size()</expr><if cond="packingList.size()==1">item<else/>items</if>in the next round</agent:say>
				</random>
			</if>

			<random>
				<agent:say gesture="'smile'">Do you want to play again?</agent:say>
				<agent:say>Would you like another round?</agent:say>
				<agent:say>Shall we try again?</agent:say>
			</random>
			<agent:listen timeout="9000"/>
		</onentry>
		<onevent name="sense.user.speak" cond="event?:sem:yes">
			<agent:say gesture="'smile'">Okay, let's play again.</agent:say>
			<call state="ClearPackingList"/>
			<goto state="FurhatPacks"/>
		</onevent>
		<onevent name="sense.user.speak" cond="event?:sem:no">
			<agent:say gesture="'express_sad'">Okay, goodbye</agent:say>
			<call state="ClearPackingList"/>
			<goto state="WaitToContinue"/>
		</onevent>		
	</state>
	
	<state id="Dialog">
		<onevent name="sense.user.speech.start" cond="system.isAttending(event) and eq(event:speakers, 1)">
			<agent:gesture name="'smile'"/>
		</onevent>
		<onevent name="sense.user.speak" cond="event?:sem:stop">
			<agent:say>
				Goodbye
			</agent:say>
			<call state="ClearPackingList"/>
			<goto state="WaitToContinue"/>
		</onevent>
		<onevent name="sense.user.speak">
			<agent:say>Sorry, I didn't get that.</agent:say>
			<!-- <reentry/> -->
			<agent:listen/>
		</onevent>
		<onevent name="sense.user.speak.side">
			<agent:attendOther mode="'eyes'" />
			<agent:say>I didn't ask you.</agent:say>
			<agent:attendOther mode="'eyes'" />
			<reentry/>
		</onevent>
		<onevent name="sense.user.speak.multi">
			<agent:say>Don't speak at the same time.</agent:say>
			<reentry/>
		</onevent>
		<onevent name="sense.user.silence">
			<agent:say>Sorry, I didn't hear anything.</agent:say>
			<reentry/>
		</onevent>
 		<onevent name="sense.user.leave" cond="system.isAttending(event)">
			<if cond="system.hasUsers()">
				<agent:attendRandom/>
			<else />
				<goto state="Idle"/>
			</if>
		</onevent> 
		<onevent name="repeat">
			<reentry/>
		</onevent>
	</state>
	
</flow>